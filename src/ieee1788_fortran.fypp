#:include "ieee1788_fortran_common.fypp"
module ${MODULE_NAME}$

    #:for KIND in REAL_KINDS
    use, intrinsic :: iso_fortran_env, only: ${KIND}$
    #:endfor

    #:for TYPE in IEEE_CLASS_TYPES
    use, non_intrinsic :: ieee_class_fortran, only: is_${TYPE}$
    #:endfor


    implicit none


    private

    #:for KIND in REAL_KINDS
    public :: bare_infsup_${KIND}$_type
    #:endfor
    public :: is_empty
    public :: is_entire
    public :: kind
    public :: set_empty
    public :: set_entire

    #:for KIND in REAL_KINDS

    #:set TYPE_NAME = "bare_infsup_" + KIND + "_type"
    type :: ${TYPE_NAME}$
        real(${KIND}$), private :: inf, sup
    end type ${TYPE_NAME}$
    #:endfor


    !> version: experimental
    !> Checks whether `x` is empty set
    #:set INTERFACE_NAME = "is_empty"
    interface ${INTERFACE_NAME}$
        #:for KIND in REAL_KINDS

        #:set FUNCTION_NAME = "bare_infsup_" + KIND + "_" + INTERFACE_NAME
        module pure elemental function ${FUNCTION_NAME}$(x) result(result)

            type(bare_infsup_${KIND}$_type), intent(in) :: x

            logical :: result

        end function ${FUNCTION_NAME}$

        #:endfor
    end interface ${INTERFACE_NAME}$
    #:del INTERFACE_NAME


    !> version: experimental
    !> Checks whether `x` is the whole line
    #:set INTERFACE_NAME = "is_entire"
    interface ${INTERFACE_NAME}$
        #:for KIND in REAL_KINDS

        #:set FUNCTION_NAME = "bare_infsup_" + KIND + "_" + INTERFACE_NAME
        module pure elemental function ${FUNCTION_NAME}$(x) result(result)

            type(bare_infsup_${KIND}$_type), intent(in) :: x

            logical :: result

        end function ${FUNCTION_NAME}$

        #:endfor
    end interface ${INTERFACE_NAME}$
    #:del INTERFACE_NAME


    !> `kind(x)` returns the kind value of the entity `x`.
    #:set INTERFACE_NAME = "kind"
    interface ${INTERFACE_NAME}$
        #:for KIND in REAL_KINDS

        #:set FUNCTION_NAME = "bare_infsup_" + KIND + "_" + INTERFACE_NAME
        module pure elemental function ${FUNCTION_NAME}$(x) result(result)

            type(bare_infsup_${KIND}$_type), intent(in) :: x

            integer :: result

        end function ${FUNCTION_NAME}$

        #:endfor
    end interface ${INTERFACE_NAME}$
    #:del INTERFACE_NAME


    !> version: experimental
    !> set the empty set to `x`
    #:set INTERFACE_NAME = "set_empty"
    interface ${INTERFACE_NAME}$
        #:for KIND in REAL_KINDS

        #:set SUBROUTINE_NAME = "bare_infsup_" + KIND + "_" + INTERFACE_NAME
        module pure elemental subroutine ${SUBROUTINE_NAME}$(x)

            type(bare_infsup_${KIND}$_type), intent(inout) :: x

        end subroutine ${SUBROUTINE_NAME}$

        #:endfor
    end interface ${INTERFACE_NAME}$
    #:del INTERFACE_NAME


    !> version: experimental
    !> set the whole line to `x`
    #:set INTERFACE_NAME = "set_entire"
    interface ${INTERFACE_NAME}$
        #:for KIND in REAL_KINDS

        #:set SUBROUTINE_NAME = "bare_infsup_" + KIND + "_" + INTERFACE_NAME
        module pure elemental subroutine ${SUBROUTINE_NAME}$(x)

            type(bare_infsup_${KIND}$_type), intent(inout) :: x

        end subroutine ${SUBROUTINE_NAME}$

        #:endfor
    end interface ${INTERFACE_NAME}$
    #:del INTERFACE_NAME

end module ${MODULE_NAME}$
