#:include "../src/ieee1788_fortran_common.fypp"
program test_ieee_class_fortran

    #:for REAL_KIND in REAL_KINDS
    use, intrinsic :: iso_fortran_env, only: ${REAL_KIND}$
    #:endfor
    use, intrinsic :: iso_fortran_env, only: compiler_options
    use, intrinsic :: iso_fortran_env, only: compiler_version


    use, intrinsic :: ieee_arithmetic, only: ieee_signaling_nan
    use, intrinsic :: ieee_arithmetic, only: ieee_quiet_nan
    use, intrinsic :: ieee_arithmetic, only: ieee_negative_inf
    use, intrinsic :: ieee_arithmetic, only: ieee_negative_normal
    use, intrinsic :: ieee_arithmetic, only: ieee_negative_denormal
    use, intrinsic :: ieee_arithmetic, only: ieee_negative_subnormal
    use, intrinsic :: ieee_arithmetic, only: ieee_negative_zero
    use, intrinsic :: ieee_arithmetic, only: ieee_positive_zero
    use, intrinsic :: ieee_arithmetic, only: ieee_positive_subnormal
    use, intrinsic :: ieee_arithmetic, only: ieee_positive_denormal
    use, intrinsic :: ieee_arithmetic, only: ieee_positive_normal
    use, intrinsic :: ieee_arithmetic, only: ieee_positive_inf
    use, intrinsic :: ieee_arithmetic, only: ieee_value


    use, non_intrinsic :: ieee1788_fortran


    implicit none


    print * , compiler_version()
    print * , compiler_options()

    call test_is_ieee_negative_inf
    call test_is_ieee_negative_zero
    call test_is_ieee_positive_inf
    call test_is_ieee_positive_zero


    contains


    #:set TARGET_IEEE_CLASS = "ieee_negative_inf"
    #:set TARGET_SUBROUTINE_NAME = "test_is_" + TARGET_IEEE_CLASS
    subroutine ${TARGET_SUBROUTINE_NAME}$()

        #:for REAL_KIND in REAL_KINDS

        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_signaling_nan      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_quiet_nan          ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if ( .not. is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_inf       ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_normal    ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_denormal  ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_subnormal ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_zero      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_zero      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_subnormal ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_denormal  ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_normal    ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_inf       ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'

        #:endfor

        print '(A)', 'OK: ${TARGET_SUBROUTINE_NAME}$'

    end subroutine ${TARGET_SUBROUTINE_NAME}$



    #:set TARGET_IEEE_CLASS = "ieee_negative_zero"
    #:set TARGET_SUBROUTINE_NAME = "test_is_" + TARGET_IEEE_CLASS
    subroutine ${TARGET_SUBROUTINE_NAME}$()

        #:for REAL_KIND in REAL_KINDS

        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_signaling_nan      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_quiet_nan          ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_inf       ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_normal    ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_denormal  ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_subnormal ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if ( .not. is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_zero      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_zero      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_subnormal ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_denormal  ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_normal    ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_inf       ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'

        #:endfor

        print '(A)', 'OK: ${TARGET_SUBROUTINE_NAME}$'

    end subroutine ${TARGET_SUBROUTINE_NAME}$



    #:set TARGET_IEEE_CLASS = "ieee_positive_inf"
    #:set TARGET_SUBROUTINE_NAME = "test_is_" + TARGET_IEEE_CLASS
    subroutine ${TARGET_SUBROUTINE_NAME}$()

        #:for REAL_KIND in REAL_KINDS

        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_signaling_nan      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_quiet_nan          ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_inf       ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_normal    ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_denormal  ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_subnormal ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_zero      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_zero      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_subnormal ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_denormal  ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_normal    ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if ( .not. is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_inf       ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'

        #:endfor

        print '(A)', 'OK: ${TARGET_SUBROUTINE_NAME}$'

    end subroutine ${TARGET_SUBROUTINE_NAME}$



    #:set TARGET_IEEE_CLASS = "ieee_positive_zero"
    #:set TARGET_SUBROUTINE_NAME = "test_is_" + TARGET_IEEE_CLASS
    subroutine ${TARGET_SUBROUTINE_NAME}$()

        #:for REAL_KIND in REAL_KINDS

        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_signaling_nan      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_quiet_nan          ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_inf       ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_normal    ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_denormal  ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_subnormal ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_negative_zero      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if ( .not. is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_zero      ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_subnormal ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_denormal  ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_normal    ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'
        if (       is_${TARGET_IEEE_CLASS}$( ieee_value( 0.0_${REAL_KIND}$ , ieee_positive_inf       ) ) ) error stop '${_FILE_}$:L${_LINE_}$ (${REAL_KIND}$)'

        #:endfor

        print '(A)', 'OK: ${TARGET_SUBROUTINE_NAME}$'

    end subroutine ${TARGET_SUBROUTINE_NAME}$

end program test_ieee_class_fortran
